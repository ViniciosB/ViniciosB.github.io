for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
x<-df[i]
dr<- merge(dr,x,all=T)
}
}
}
length(M)
M
M<-c()
Temp<-c()
length(M)
M<-c()
Temp<-c()
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
M[length(M)+1]=df$mes[i]
Temp[length(Temp)+1]=df$Temperatura[i]
}
}
}
dr<-data.frame(M,Temp);dr
dr<-data.frame(M,Temp)
dr<-rename(dr,Mes=M)
dr<-data.frame(M,Temp)
rename(dr,c("M"="Mes","Temp"="Temperatura")
M<-c()
Temp<-c()
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
M[length(M)+1]=df$mes[i]
Temp[length(Temp)+1]=df$Temperatura[i]
}
}
}
dr<-data.frame(M,Temp)
rename(dr,c("M"="Mes","Temp"="Temperatura")
dr<-data.frame(M,Temp)
dr<-rename(dr,c("M"="Mes","Temp"="Temperatura")
rename(dr, c("M"="Mes","Temp"="Temperatura"))
M<-c()
Temp<-c()
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
M[length(M)+1]=df$mes[i]
Temp[length(Temp)+1]=df$Temperatura[i]
}
}
}
dr<-data.frame(M,Temp)
rename(dr, c("M"="Mes","Temp"="Temperatura"))
dr
install.packages("dplyr")
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
busca<-c("Maio","Janeiro","Novembro")
df<-data.frame(mes,Temperatura);df
df$mes[2]
x<-df[df$mes=="Maio",]
y<-df[df$mes=="Janeiro", ]
z<-df[df$mes=="Novembro", ]
dr<-rbind(x,y,z)
dr
M<-c()
Temp<-c()
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
M[length(M)+1]=df$mes[i]
Temp[length(Temp)+1]=df$Temperatura[i]
}
}
}
dr<-data.frame(M,Temp)
rename(dr, c("M"="Mes","Temp"="Temperatura"))
dr
rename(dr, c("M"="Mes","Temp"="Temperatura"))
install.packages("dplyr")
dr
M<-c()
Temp<-c()
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
M[length(M)+1]=df$mes[i]
Temp[length(Temp)+1]=df$Temperatura[i]
}
}
}
dr<-data.frame(M,Temp)
rename(dr, c("M"="Mes","Temp"="Temperatura"))
dr
names(dr)[names(df)=='M']<-'Mes'
dr
library(plyr)
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
busca<-c("Maio","Janeiro","Novembro")
df<-data.frame(mes,Temperatura);df
df$mes[2]
x<-df[df$mes=="Maio",]
y<-df[df$mes=="Janeiro", ]
z<-df[df$mes=="Novembro", ]
dr<-rbind(x,y,z)
dr
M<-c()
Temp<-c()
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
M[length(M)+1]=df$mes[i]
Temp[length(Temp)+1]=df$Temperatura[i]
}
}
}
dr<-data.frame(Mes=M,Temperatura=Temp)
dr
#1 forma
#dados e busca
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
source("~/ex.R")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
plot(dfr$Mes,dfr$Temperatura)
plot(dfr$Mes,dfr$Temperatura)
plot(dfr$Mes,dfr$Temperatura)
plot(dfr$Mes,dfr$Temperatura)
plot(df$mes,df$Temperatura)
plot(df)
x<-df[df$mes=="Maio",]              #busca
y<-df[df$mes=="Janeiro", ]          #busca
z<-df[df$mes=="Novembro", ]         #busca
dfr<-rbind(x,y,z)                   #merge dados encontrados
dfr                                 #print dataframe resultante
################################################################################
#2 forma
M<-c()    #vetor mes vazio
Temp<-c() #vetor Temperatura vazio
#Loop de busca
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){
M[length(M)+1]=df$mes[i]
Temp[length(Temp)+1]=df$Temperatura[i]
}
}
}
dfr<-data.frame(Mes=M,Temperatura=Temp);dfr
plot(dfr$Mes,dfr$Temperatura)
#1 forma
#dados e busca
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
busca<-c("Maio","Janeiro","Novembro")
df<-data.frame(mes,Temperatura);df  #merge dataframe
x<-df[df$mes=="Maio",]              #busca
y<-df[df$mes=="Janeiro", ]          #busca
z<-df[df$mes=="Novembro", ]         #busca
dfr<-rbind(x,y,z)                   #merge dados encontrados
dfr                                 #print dataframe resultante
################################################################################
#2 forma
M<-c()    #vetor mes vazio
Temp<-c() #vetor Temperatura vazio
#Loop de busca
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){                  #compara array mes com o array de busca
M[length(M)+1]=df$mes[i]                #calcula pos e insere no array mes
Temp[length(Temp)+1]=df$Temperatura[i]  #calcula pos e insere no array temperatura
}
}
}
dfr<-data.frame(Mes=M,Temperatura=Temp);dfr #renomear colunas e printar dataframe resultante
View(arq)
#1 forma
#dados e busca
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
busca<-c("Maio","Janeiro","Novembro")
df<-data.frame(mes,Temperatura);df  #merge dataframe
x<-df[df$mes=="Maio",]              #busca
y<-df[df$mes=="Janeiro", ]          #busca
z<-df[df$mes=="Novembro", ]         #busca
dfr<-rbind(x,y,z)                   #merge dados encontrados
dfr                                 #print dataframe resultante
################################################################################
#2 forma
M<-c()    #vetor mes vazio
Temp<-c() #vetor Temperatura vazio
#Loop de busca
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){                  #compara array mes com o array de busca
M[length(M)+1]=df$mes[i]                #calcula pos e insere no array mes
Temp[length(Temp)+1]=df$Temperatura[i]  #calcula pos e insere no array temperatura
}
}
}
dfr<-data.frame(Mes=M,Temperatura=Temp);dfr #renomear colunas e printar dataframe resultante
#1 forma
#dados e busca
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
busca<-c("Maio","Janeiro","Novembro")
df<-data.frame(mes,Temperatura);df  #merge dataframe
x<-df[df$mes=="Maio",]              #busca
y<-df[df$mes=="Janeiro", ]          #busca
z<-df[df$mes=="Novembro", ]         #busca
dfr<-rbind(x,y,z)                   #merge dados encontrados
dfr                                 #print dataframe resultante
################################################################################
#2 forma
M<-c()    #vetor mes vazio
Temp<-c() #vetor Temperatura vazio
#Loop de busca
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){                  #compara array mes com o array de busca
M[length(M)+1]=df$mes[i]                #calcula pos e insere no array mes
Temp[length(Temp)+1]=df$Temperatura[i]  #calcula pos e insere no array temperatura
}
}
}
dfr<-data.frame(Mes=M,Temperatura=Temp);dfr #renomear colunas e printar dataframe resultante
#1 forma
#dados e busca
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
busca<-c("Maio","Janeiro","Novembro")
df<-data.frame(mes,Temperatura);df  #merge dataframe
x<-df[df$mes=="Maio",]              #busca
x<-df[df$mes=="Maio",]              #busca
x<-df[df$mes=="Maio",]              #busca
#1 forma
#dados e busca
mes <- c("Janeiro", "Fevereiro", "Marco", "Abril","Maio","Junho","julho", "Agosto", "Setembro", "Outubro", "Novembro","Dezembro")
Temperatura <- c(33, 32 , 27, 26.50, 27, 19.50, 18,19,22,27,26.50,30)
busca<-c("Maio","Janeiro","Novembro")
df<-data.frame(mes,Temperatura);df  #merge dataframe
x<-df[df$mes=="Maio",]              #busca
y<-df[df$mes=="Janeiro", ]          #busca
z<-df[df$mes=="Novembro", ]         #busca
dfr<-rbind(x,y,z)                   #merge dados encontrados
dfr                                 #print dataframe resultante
################################################################################
#2 forma
M<-c()    #vetor mes vazio
Temp<-c() #vetor Temperatura vazio
#Loop de busca
for(i in 1:length(mes)){
for(j in 1:length(busca)){
if(df$mes[i]==busca[j]){                  #compara array mes com o array de busca
M[length(M)+1]=df$mes[i]                #calcula pos e insere no array mes
Temp[length(Temp)+1]=df$Temperatura[i]  #calcula pos e insere no array temperatura
}
}
}
dfr<-data.frame(Mes=M,Temperatura=Temp);dfr #renomear colunas e printar dataframe resultante
setwd("C:/Users/vinic/Documents/GitHub/viniciosb.github.io/ModelagemEBiometriaFlorestal")
rm(list=ls(all=TRUE))
entrada<-function(n){
inpt<-c()
for(i in 1: n){
x=sample(0:1,1,replace = TRUE)
if(x==0){
inpt[length(inpt)+1]=F
}
else{
inpt[length(inpt)+1]=T
}
}
return(inpt)
}
saida<-function(input){
output<-c() #vetor output nulo
#df<-data.frame(input, output)
flag=1 #flag de iteracao de ocorrencias de troca
for(i in 1:length(input)){
if(input[i]=="FALSE"){
output[i]=NA ## se input na pos I  for igual a FALSE o vetor NA recebe NA
}
if(input[i]=="TRUE"){
output[i]=flag #se o vetor na pos for igual a TRUE o vetor output recebe flag
if(input[i+1]=="FALSE"){
flag=flag+1 # se a proxima pos for igual a False flag e incrementada
}
}
}
return(output)
}
Valor=1
print(valor)
input<-entrada(val)
output<-saida(input)
df<-data.frame(input,output)
df
#setwd("C:/Users/vinic/Documents/GitHub/viniciosb.github.io/ModelagemEBiometriaFlorestal")
rm(list=ls(all=TRUE))
entrada<-function(n){
inpt<-c()
for(i in 1: n){
x=sample(0:1,1,replace = TRUE)
if(x==0){
inpt[length(inpt)+1]=F
}
else{
inpt[length(inpt)+1]=T
}
}
return(inpt)
}
saida<-function(input){
output<-c() #vetor output nulo
#df<-data.frame(input, output)
flag=1 #flag de iteracao de ocorrencias de troca
for(i in 1:length(input)){
if(input[i]=="FALSE"){
output[i]=NA ## se input na pos I  for igual a FALSE o vetor NA recebe NA
}
if(input[i]=="TRUE"){
output[i]=flag #se o vetor na pos for igual a TRUE o vetor output recebe flag
if(input[i+1]=="FALSE"){
flag=flag+1 # se a proxima pos for igual a False flag e incrementada
}
}
}
return(output)
}
Valor=1
print(valor)
Valor
input<-entrada(valor)
input<-entrada(15)
output<-saida(input)
df<-data.frame(input,output)
val=length(input)
val=15L
input<-entrada(val)
#setwd("C:/Users/vinic/Documents/GitHub/viniciosb.github.io/ModelagemEBiometriaFlorestal")
rm(list=ls(all=TRUE))
entrada<-function(n){
inpt<-c()
for(i in 1: n){
x=sample(0:1,1,replace = TRUE)
if(x==0){
inpt[length(inpt)+1]=F
}
else{
inpt[length(inpt)+1]=T
}
}
return(inpt)
}
saida<-function(input){
output<-c() #vetor output nulo
#df<-data.frame(input, output)
flag=1 #flag de iteracao de ocorrencias de troca
for(i in 1:length(input)){
if(input[i]=="FALSE"){
output[i]=NA ## se input na pos I  for igual a FALSE o vetor NA recebe NA
}
if(input[i]=="TRUE"){
output[i]=flag #se o vetor na pos for igual a TRUE o vetor output recebe flag
if(input[i+1]=="FALSE"){
flag=flag+1 # se a proxima pos for igual a False flag e incrementada
}
}
}
return(output)
}
val=15L
input<-entrada(val)
output<-saida(input)
df<-data.frame(input,output)
#setwd("C:/Users/vinic/Documents/GitHub/viniciosb.github.io/ModelagemEBiometriaFlorestal")
rm(list=ls(all=TRUE))
entrada<-function(n){
inpt<-c()
for(i in 1: n){
x=sample(0:1,1,replace = TRUE)
if(x==0){
inpt[length(inpt)+1]=F
}
else{
inpt[length(inpt)+1]=T
}
}
return(inpt)
}
saida<-function(input){
output<-c() #vetor output nulo
#df<-data.frame(input, output)
flag=1 #flag de iteracao de ocorrencias de troca
for(i in 1:length(input)){
if(input[i]=="FALSE"){
output[i]=NA ## se input na pos I  for igual a FALSE o vetor NA recebe NA
}
if(input[i]=="TRUE"){
output[i]=flag #se o vetor na pos for igual a TRUE o vetor output recebe flag
if(input[i+1]=="FALSE"){
flag=flag+1 # se a proxima pos for igual a False flag e incrementada
}
}
}
return(output)
}
val=15
input<-entrada(val)
output<-saida(input)
df<-data.frame(input,output)
df
#setwd("C:/Users/vinic/Documents/GitHub/viniciosb.github.io/ModelagemEBiometriaFlorestal")
rm(list=ls(all=TRUE))
entrada<-function(n){
inpt<-c()
for(i in 1: n){
x=sample(0:1,1,replace = TRUE)
if(x==0){
inpt[length(inpt)+1]=F
}
else{
inpt[length(inpt)+1]=T
}
}
return(inpt)
}
saida<-function(input){
output<-c() #vetor output nulo
#df<-data.frame(input, output)
flag=1 #flag de iteracao de ocorrencias de troca
for(i in 1:length(input)){
if(input[i]=="FALSE"){
output[i]=NA ## se input na pos I  for igual a FALSE o vetor NA recebe NA
}
if(input[i]=="TRUE"){
output[i]=flag #se o vetor na pos for igual a TRUE o vetor output recebe flag
if(input[i+1]=="FALSE"){
flag=flag+1 # se a proxima pos for igual a False flag e incrementada
}
}
}
return(output)
}
val=15
input<-entrada(val)
output<-saida(input)
df<-data.frame(input,output)
df
input<-entrada(val)
output<-saida(input)
saida<-function(input){
output<-c() #vetor output nulo
#df<-data.frame(input, output)
flag=1 #flag de iteracao de ocorrencias de troca
for(i in 1:length(input)){
if(input[i]=="FALSE"){
output[i]=NA ## se input na pos I  for igual a FALSE o vetor NA recebe NA
}
if(input[i]=="TRUE"){
output[i]=flag #se o vetor na pos for igual a TRUE o vetor output recebe flag
if(input[i+1]=="FALSE"){
flag=flag+1 # se a proxima pos for igual a False flag e incrementada
}
}
}
return(output)
}
val=15
input<-entrada(val)
output<-saida(input)
setwd("C:/Users/vinic/Documents/GitHub/viniciosb.github.io/ModelagemEBiometriaFlorestal")
rm(list=ls(all=TRUE))
entrada<-function(n){
inpt<-c()
for(i in 1: n){
x=sample(0:1,1,replace = TRUE)
if(x==0){
inpt[length(inpt)+1]=F
}
else{
inpt[length(inpt)+1]=T
}
}
return(inpt)
}
saida<-function(input){
output<-c() #vetor output nulo
#df<-data.frame(input, output)
flag=1 #flag de iteracao de ocorrencias de troca
for(i in 1:length(input)){
if(input[i]=="FALSE"){
output[i]=NA ## se input na pos I  for igual a FALSE o vetor NA recebe NA
}
if(input[i]=="TRUE"){
output[i]=flag #se o vetor na pos for igual a TRUE o vetor output recebe flag
if(input[i+1]=="FALSE"){
flag=flag+1 # se a proxima pos for igual a False flag e incrementada
}
}
}
return(output)
}
val=15
input<-entrada(val)
output<-saida(input)
df<-data.frame(input,output)
df
